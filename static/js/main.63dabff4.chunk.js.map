{"version":3,"sources":["component/pomodoroSlice.js","assets/alert.mp3","component/Counter.js","component/Header.js","component/Settings.js","store/store.js","App.js","index.js"],"names":["pomodoroSlice","createSlice","name","initialState","workTime","pauseTime","phase","reducers","switchPhase","state","action","setTime","payload","actions","pomodoroSelector","pomodoro","Counter","useSelector","dispatch","useDispatch","useState","timeLeft","setTimeLeft","useEffect","Notification","requestPermission","interval","setInterval","item","clearInterval","play","notify","permission","Audio","alertSound","Math","floor","onClick","Header","Settings","work","setWork","pause","setPause","onSubmit","e","parseInt","preventDefault","type","value","onChange","target","configureStore","reducer","pomodoroReducer","App","store","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMAEMA,EAAgBC,YAAY,CAChCC,KAAM,WACNC,aAAc,CACZC,SAAU,EACVC,UAAW,EACXC,MAAO,QAETC,SAAU,CACRC,YAAa,SAACC,EAAOC,GACnB,OAAO,2BAAKD,GAAZ,IAAmBH,MAAsB,QAAfG,EAAMH,MAAkB,QAAU,UAE9DK,QAAS,SAACF,EAAOC,GACf,OAAO,2BAAKD,GAAUC,EAAOE,a,EAKKZ,EAAca,QAAvCL,E,EAAAA,YAAaG,E,EAAAA,QACbX,IAAf,QACac,EAAmB,SAACL,GAAD,OAAWA,EAAMM,UCrBlC,MAA0B,kC,OC+E1BC,EA1EC,WACd,IAAMD,EAAWE,YAAYH,GACvBI,EAAWC,cAFG,EAGYC,mBAASL,EAASX,UAH9B,mBAGbiB,EAHa,KAGHC,EAHG,KAKpBC,qBAAU,WACRC,aAAaC,sBACZ,IAEHF,qBAAU,WACRD,EACoB,QAAlBP,EAAST,MACe,GAApBS,EAASX,SACY,GAArBW,EAASV,WAGf,IAAMqB,EAAWC,aAAY,WAC3BL,GAAY,SAACM,GAAD,OAAUA,EAAO,OAC5B,KAEH,OAAO,WACLC,cAAcH,MAEf,CAACX,EAAST,QAEbiB,qBAAU,WACQ,GAAZF,IACFS,IACAZ,EAASV,KACTuB,OAED,CAACV,IAEJ,IAAMU,EAAS,WACb,GAAgC,YAA5BP,aAAaQ,WACH,IAAIR,aAAa,qBAI3BM,EAAO,WACC,IAAIG,MAAMC,GAChBJ,QAGR,OACE,gCACE,6BAAKf,EAAST,QACd,+BACG6B,KAAKC,MAAMf,EAAW,IADzB,IAC+BA,EAAW,MAE1C,wBACEgB,QAAS,WACPf,EACoB,QAAlBP,EAAST,MACe,GAApBS,EAASX,SACY,GAArBW,EAASV,YALnB,mBAWA,wBACEgC,QAAS,WACPP,IACAZ,EAASV,KACTuB,KAJJ,wBC1DSO,EARA,WACb,OACE,8BACE,6CCgDSC,EA/CE,WAAO,IAAD,EACGnB,mBAAS,GADZ,mBACdoB,EADc,KACRC,EADQ,OAEKrB,mBAAS,GAFd,mBAEdsB,EAFc,KAEPC,EAFO,KAGf5B,EAAWE,YAAYH,GACvBI,EAAWC,cAEjBI,qBAAU,WACRkB,EAAQ1B,EAASX,UACjBuC,EAAS5B,EAASV,aACjB,IAOH,OACE,gCACE,0CACA,uBAAMuC,SARW,SAACC,GACpB3B,EAASP,EAAQ,CAAEP,SAAU0C,SAASN,GAAOnC,UAAWyC,SAASJ,MACjEG,EAAEE,kBAMA,UACE,+CACa,IACX,uBACE7C,KAAK,OACL8C,KAAK,OACLC,MAAOT,EACPU,SAAU,SAACL,GACTJ,EAAQI,EAAEM,OAAOF,aAIvB,gDACc,IACZ,uBACE/C,KAAK,QACL8C,KAAK,OACLC,MAAOP,EACPQ,SAAU,SAACL,GACTF,EAASE,EAAEM,OAAOF,aAIxB,uBAAOD,KAAK,SAASC,MAAM,gBC3CpBG,cAAe,CAC5BC,QAAS,CACPtC,SAAUuC,KCcCC,G,MAZH,WACV,OACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,WCTRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.63dabff4.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst pomodoroSlice = createSlice({\n  name: \"pomodoro\",\n  initialState: {\n    workTime: 2,\n    pauseTime: 1,\n    phase: \"work\",\n  },\n  reducers: {\n    switchPhase: (state, action) => {\n      return { ...state, phase: state.phase == \"work\" ? \"pause\" : \"work\" };\n    },\n    setTime: (state, action) => {\n      return { ...state, ...action.payload };\n    },\n  },\n});\n\nexport const { switchPhase, setTime } = pomodoroSlice.actions;\nexport default pomodoroSlice.reducer;\nexport const pomodoroSelector = (state) => state.pomodoro;\n","export default __webpack_public_path__ + \"static/media/alert.97b7277e.mp3\";","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { pomodoroSelector, setTime, switchPhase } from \"./pomodoroSlice\";\nimport alertSound from \"../assets/alert.mp3\";\n\nconst Counter = () => {\n  const pomodoro = useSelector(pomodoroSelector);\n  const dispatch = useDispatch();\n  const [timeLeft, setTimeLeft] = useState(pomodoro.workTime);\n\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []);\n\n  useEffect(() => {\n    setTimeLeft(\n      pomodoro.phase == \"work\"\n        ? pomodoro.workTime * 60\n        : pomodoro.pauseTime * 60\n    );\n\n    const interval = setInterval(() => {\n      setTimeLeft((item) => item - 1);\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [pomodoro.phase]);\n\n  useEffect(() => {\n    if (timeLeft == 0) {\n      play();\n      dispatch(switchPhase());\n      notify();\n    }\n  }, [timeLeft]);\n\n  const notify = () => {\n    if (Notification.permission === \"granted\") {\n      let notif = new Notification(\"Switching phase!\");\n    }\n  };\n\n  const play = () => {\n    var audio = new Audio(alertSound);\n    audio.play();\n  };\n\n  return (\n    <div>\n      <h2>{pomodoro.phase}</h2>\n      <h1>\n        {Math.floor(timeLeft / 60)}:{timeLeft % 60}\n      </h1>\n      <button\n        onClick={() => {\n          setTimeLeft(\n            pomodoro.phase == \"work\"\n              ? pomodoro.workTime * 60\n              : pomodoro.pauseTime * 60\n          );\n        }}\n      >\n        RESET\n      </button>\n      <button\n        onClick={() => {\n          play();\n          dispatch(switchPhase());\n          notify();\n        }}\n      >\n        SWITCH\n      </button>\n    </div>\n  );\n};\n\nexport default Counter;\n","const Header = () => {\n  return (\n    <div>\n      <h1>pomodoro</h1>\n    </div>\n  );\n};\n\nexport default Header;\n","import { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { pomodoroSelector, setTime } from \"./pomodoroSlice\";\n\nconst Settings = () => {\n  const [work, setWork] = useState(0);\n  const [pause, setPause] = useState(0);\n  const pomodoro = useSelector(pomodoroSelector);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setWork(pomodoro.workTime);\n    setPause(pomodoro.pauseTime);\n  }, []);\n\n  const handleSubmit = (e) => {\n    dispatch(setTime({ workTime: parseInt(work), pauseTime: parseInt(pause) }));\n    e.preventDefault();\n  };\n\n  return (\n    <div>\n      <h3>settings</h3>\n      <form onSubmit={handleSubmit}>\n        <label>\n          work time:{\" \"}\n          <input\n            name=\"work\"\n            type=\"text\"\n            value={work}\n            onChange={(e) => {\n              setWork(e.target.value);\n            }}\n          />\n        </label>\n        <label>\n          pause time:{\" \"}\n          <input\n            name=\"pause\"\n            type=\"text\"\n            value={pause}\n            onChange={(e) => {\n              setPause(e.target.value);\n            }}\n          />\n        </label>\n        <input type=\"submit\" value=\"save\" />\n      </form>\n    </div>\n  );\n};\nexport default Settings;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport pomodoroReducer from \"../component/pomodoroSlice\";\n\nexport default configureStore({\n  reducer: {\n    pomodoro: pomodoroReducer,\n  },\n});\n","import { Provider } from \"react-redux\";\nimport Counter from \"./component/Counter\";\nimport Header from \"./component/Header\";\nimport Settings from \"./component/Settings\";\nimport store from \"./store/store\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Header />\n        <Counter />\n        <Settings />\n      </div>\n    </Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}